'versie 1.2 // PEC VR // 15-06-2018 [Niels]
'==========================================
'
Sub ophalen_vrPEC()

Dim wkb1 As Workbook, wkb2 As Workbook
Dim fileName As String, nDate As String
Dim RetVal As Variant, wk_name As Variant
Dim removeArray As Variant, addArray As Variant
Dim TotalRowsRemoved As Long
Dim bandNumberRem As String
Dim bandNumberAdd As Variant
Dim bandNumber As Variant
Dim RowToTest As Long, RowToAdd As Long, TotalRowsAdded As Long, lastRow As Long
Dim lastRowNew As Long, lastRowOld As Long
Dim Sheet2Name As String
Dim rng As Variant

Application.ScreenUpdating = False
Application.DisplayAlerts = False

'verandert de folder naar de map met de voorraadlijsten
ChDrive "N"
ChDir "N:\PEC\Voorraad (boekhouding)\Voorraad PEC (ERP)\(jetreport) Voorraadwijzigingen"

'laat de gebruiker een voorraadlijst selecteren
fileName = Application.GetOpenFilename( _
    FileFilter:="xl Files,*.xl*,xm Files,*.xm*", _
    Title:="Selecteer de Excel-file van de voorraadlijst om de huidige voorraad mee te vergelijken.", _
    MultiSelect:=False)

'maakt objecten van de actieve werkmap (nieuwe VR) en creëert een nieuwe werkmap voor het geselecteerde bestand (oudere VR)
Set wkb1 = ActiveWorkbook
Set wkb2 = Workbooks.Add(fileName)

'kopieert het eerste werkblad van het geselecteerde bestand naar de actieve werkmap
wkb2.Sheets(1).Copy after:=wkb1.Sheets(1)

'focust op het werkblad van de huidige voorraad en converteert naar waarden
wkb1.Sheets(1).Activate
lastRow = Cells(Rows.Count, "C").End(xlUp).Row - 8
Range("C6:C" & lastRow).Value = Range("C6:C" & lastRow).Value

'focust op het werkblad van de oude voorraad en converteert naar waarden
'schakelt alle filters weer uit
wkb1.Sheets(2).Activate
If ActiveSheet.FilterMode = True Then
ActiveSheet.ShowAllData
End If
lastRow = Cells(Rows.Count, "C").End(xlUp).Row - 8
Range("C6:C" & lastRow).Value = Range("C6:C" & lastRow).Value

'sluit de werkmap van de oudere voorraad
wkb2.Close

'herformatteert de datum en tijd van vandaag
nDate = Format(Date, "yyyy-mm-dd")
nTime = Format(Time, "(hhumm)")

'geeft het werkblad de datum van vandaag als titel
ActiveWorkbook.Worksheets(1).Name = nDate & " " & nTime
'slaat de nieuwe werkmap op als een xlsm bestand
ActiveWorkbook.SaveAs fileName:=nDate & " " & nTime & " PEC Voorraad", FileFormat:=xlOpenXMLWorkbookMacroEnabled
wk_name = nDate & " " & nTime & " PEC Voorraad.xlsm"

'collection ringnummers nieuwe voorraad
Dim NewSupply As Collection
Set NewSupply = New Collection

Worksheets(1).Activate
On Error Resume Next
For lastRowNew = Cells(Rows.Count, "C").End(xlUp).Row - 8 To 6 Step -1
    NewSupply.Add Range("C" & lastRowNew).Value, Range("C" & lastRowNew).Value
    'Debug.Print NewSupply(NewSupply.Count)
Next
On Error GoTo 0

'collection ringnummers oude voorraad
Dim OldSupply As Collection
Set OldSupply = New Collection

Worksheets(2).Activate
On Error Resume Next
For lastRowOld = Cells(Rows.Count, "C").End(xlUp).Row - 8 To 6 Step -1
    OldSupply.Add Range("C" & lastRowOld).Value, Range("C" & lastRowOld).Value
    'Debug.Print OldSupply(OldSupply.Count)
Next
On Error GoTo 0

'collection toegevoegde duiven
Dim AddedSupply As Collection
Set AddedSupply = New Collection

For Each bandNumber In NewSupply
    If Not Exists(OldSupply, bandNumber) Then
        AddedSupply.Add (bandNumber)
    End If
Next

'collection verwijderde duiven
Dim RemovedSupply As Collection
Set RemovedSupply = New Collection

For Each bandNumber In OldSupply
    If Not Exists(NewSupply, bandNumber) Then
        RemovedSupply.Add (bandNumber)
    End If
Next

'maakt een werkblad voor de toegevoegde ringnummers
Dim wsName As String
wsName = "toegevoegd"
Worksheets.Add(after:=Sheets(Sheets.Count)).Name = wsName
Worksheets("toegevoegd").Range("A1").Value = "band numbers"

On Error Resume Next
For i = 1 To AddedSupply.Count
    Worksheets("toegevoegd").Range("A" & i + 1).Value = AddedSupply(i)
Next
On Error GoTo 0

'maakt een werkblad voor de verwijderde ringnummers
wsName = "verwijderd"
Worksheets.Add(after:=Sheets(Sheets.Count)).Name = wsName
Worksheets("verwijderd").Range("A1").Value = "band numbers"

On Error Resume Next
For i = 1 To AddedSupply.Count
    Worksheets("verwijderd").Range("A" & (i + 1)).Value = RemovedSupply(i)
Next
On Error GoTo 0

'toont de opmerkingen bij de verwijderde ringnummers
Dim lastRowlookupSheet As Long
lastRowlookupSheet = Worksheets(2).Range("AA:AA").Find(what:="Opmerking", after:=Range("AA6")).Row - 8
Dim lookupSheet As String
lookupSheet = Worksheets(2).Name
ThisWorkbook.Worksheets("verwijderd").Select
With ThisWorkbook.Worksheets("verwijderd")
    lastRow = .Cells(.Rows.Count, "A").End(xlUp).Row
    .Range("B2:B" & lastRow).Formula = "=IFERROR(IF(VLOOKUP($A2,'" & lookupSheet & "'!$C$6:$AA$" & lastRowlookupSheet & ",25,FALSE)="""","""",VLOOKUP($A2,'" & lookupSheet & "'!$C$6:$AA$" & lastRowlookupSheet & ",25,FALSE)),"""")"
    .Range("B2:B" & lastRow).Value = .Range("B2:B" & lastRow).Value
End With

'creëert arrays van de collecties voor verdere verwerking
addArray = collectionToArray(AddedSupply)
removeArray = collectionToArray(RemovedSupply)

Worksheets(2).Activate
'schakelt alle filters weer uit
If ActiveSheet.FilterMode = True Then
    ActiveSheet.ShowAllData
End If

'zoekt voor elke rij of het ringnummer in kolom C terug te vinden is in de array met verwijderde ringnummers
'indien WAAR verwijdert de volledige rij
For RowToTest = Cells(Rows.Count, "C").End(xlUp).Row - 8 To 6 Step -1
    bandNumberRem = Cells(RowToTest, "C").Value
    If IsArray(removeArray) Then 'controle of het om een array of var gaat (1 item array = var zoals het hier gebruikt wordt)
        If IsInArray(bandNumberRem, removeArray) Then
            Rows(RowToTest).EntireRow.Delete
        End If
    Else
        If bandNumberRem = removeArray Then
            Rows(RowToTest).EntireRow.Delete
        End If
    End If
Next

'zoekt de laatste rij - 7 met data in kolom "C" en voegt alle toegevoegde ringnummers toe
If IsNull(addArray) = False Then
    If IsArray(addArray) Then
       For Each bandNumberAdd In addArray
            RowToAdd = Cells(Rows.Count, "C").End(xlUp).Row - 7
            Cells(RowToAdd, "C").Select
            ActiveCell.EntireRow.Insert Shift:=xlDown, _
            CopyOrigin:=xlFormatFromLeftOrAbove
            Cells(RowToAdd, "C") = bandNumberAdd
            Range("D" & RowToAdd & ":Z" & RowToAdd).Value = "-"
            Range("AA" & RowToAdd).Value = "nieuwe duif; check " & Date
        Next bandNumberAdd
    Else
        RowToAdd = Cells(Rows.Count, "C").End(xlUp).Row - 7
        Cells(RowToAdd, "C").Select
        ActiveCell.EntireRow.Insert Shift:=xlDown, _
        CopyOrigin:=xlFormatFromLeftOrAbove
        Cells(RowToAdd, "C") = addArray
        Range("D" & RowToAdd & ":Z" & RowToAdd).Value = "-"
        Range("AA" & RowToAdd).Value = "nieuwe duif; check " & Date
    End If
End If

'sorteert de oude voorraadlijst oplopend volgens ringnummer
lastRow = Cells(Rows.Count, "C").End(xlUp).Row - 8
Range("C6:AA" & lastRow).Sort key1:=Range("C6:C" & lastRow), _
    order1:=xlAscending, Header:=xlNo

Worksheets(1).Activate

'sorteert de nieuwe voorraadlijst oplopend volgens ringnummer
lastRow = Cells(Rows.Count, "C").End(xlUp).Row - 8
Range("C6:AA" & lastRow).Sort key1:=Range("C6:C" & lastRow), _
    order1:=xlAscending, Header:=xlNo

'voegt formules toe aan de nieuwe voorraadlijst (exact en vlookup)
'voor vergelijkingen en opzoekingen uit oude voorraadlijst
Sheet2Name = Sheets(2).Name
Range("AA6:AA" & lastRow).Formula = "=VLOOKUP(C6,'" & Sheet2Name & "'!$C$5:$AA$" & lastRow & ",25,FALSE)"
Range("AB6:AZ" & lastRow).Formula = "=EXACT(C6,'" & Sheet2Name & "'!C6)"

'converteert de formules naar waarden
With Range("AA6:AY" & lastRow)
    .Value = .Value
End With

'kleurt celachtergrond nieuwe duiven in het geel
If IsNull(addArray) = False Then
    For RowToTest = (Cells(Rows.Count, "C").End(xlUp).Row - 8) To 6 Step -1
        bandNumberAdd = Cells(RowToTest, "C").Value
        If IsArray(addArray) Then
            If IsInArray(bandNumberAdd, addArray) Then
                Range("C" & RowToTest).Interior.Color = 65535
            End If
        Else
            If bandNumberAdd = addArray Then
                Range("C" & RowToTest).Interior.Color = 65535
            End If
        End If
    Next
End If

'kolombreedte kolom 'opmerkingen' autoaanpassen
Columns("AA:AA").Select
    Selection.Columns.AutoFit
'kolombreedte toegevoegde ringnummers autoaanpassen en sorteren
Worksheets(3).Activate
If IsEmpty(Range("A1")) = False Then
    Columns("A:A").Select
        Selection.Columns.AutoFit
    lastRow = Cells(Rows.Count, "A").End(xlUp).Row
    Range("A1:A" & lastRow).Sort key1:=Range("A1:A" & lastRow), _
        order1:=xlAscending, Header:=xlNo
End If

'kolombreedtes oude ringnummers autoaanpassen en sorteren
Worksheets(4).Activate
If IsEmpty(Range("A1")) = False Then
    Columns("A:B").Select
        Selection.Columns.AutoFit
    lastRow = Cells(Rows.Count, "A").End(xlUp).Row
    Range("A1:B" & lastRow).Sort key1:=Range("A1:A" & lastRow), _
        order1:=xlAscending, Header:=xlNo
End If

'advanced filter
Worksheets(1).Activate
lastRow = Cells(Rows.Count, "AZ").End(xlUp).Row
Range("AB5:AZ" & (lastRow - 33)).AdvancedFilter _
Action:=xlFilterInPlace, _
CriteriaRange:=Range("AB" & (lastRow - 25) & ":AZ" & lastRow)

'titelblokkering
Columns("C:I").Select
Range("I2").Activate
ActiveWindow.FreezePanes = True

Range("C2").Activate
ActiveWorkbook.Save
Workbooks.Close
Workbooks.Open (wk_name)

Application.ScreenUpdating = True
Application.DisplayAlerts = True

End Sub

Private Function IsInArray(valToBeFound As Variant, arr As Variant) As Boolean

Dim element As Variant
On Error GoTo IsInArrayError:
    For Each element In arr
        If element = valToBeFound Then
            IsInArray = True
            Exit Function
        End If
    Next element
Exit Function
IsInArrayError:
On Error GoTo 0
IsInArray = False

End Function

Private Function Exists(pColl, ByVal bandNr As String) As Boolean

For Each Item In pColl
    If bandNr = Item Then
        Exists = True
        Debug.Print bandNr
        Exit Function
    Else
        Exists = False
    End If
Next Item

End Function

Function collectionToArray(c As Collection) As Variant()

If c.Count > 0 Then
    On Error Resume Next
    Dim a() As Variant: ReDim a(0 To c.Count - 1)
    Dim i As Integer
    For i = 1 To c.Count
        a(i - 1) = c.Item(i)
    Next
    collectionToArray = a
    On Error GoTo 0
Else
    Exit Function
End If

End Function
